import org.springframework.boot.gradle.plugin.SpringBootPlugin
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    ext {
        springBootVersion = '2.4.4.RELEASE'
        springBootGradlePluginVersion = '2.4.4'
        protobufGradleVersion = '0.8.15'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootGradlePluginVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:${protobufGradleVersion}")
    }
}

plugins {
    id 'idea'
    id 'nebula.release' version '15.3.1'
    id 'nebula.lint' version '16.17.0'
    id 'nebula.project' version '7.0.9'
    id 'nebula.info' version '9.3.0'
    id 'org.springframework.boot' version "$springBootGradlePluginVersion" apply false
    id 'io.franzbecker.gradle-lombok' version '4.0.0' apply false
}

contacts {
    'mail@example.com' {
        moniker 'tbk'
        role 'owner'
        mail 'mail@1'
        email 'mail@2'
        github 'theborakompanioni'
    }
}

apply from: 'versions.gradle'

group = 'io.github.theborakompanioni'

def testcontainersRyukDisabled = System.getenv("TESTCONTAINERS_RYUK_DISABLED") ?: "true"

configurations.all {
    resolutionStrategy {
        // check for updates in modules every build
        cacheChangingModulesFor 0, 'seconds'
        preferProjectModules()
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        failOnVersionConflict()
    }
}

allprojects {
    apply plugin: 'nebula.lint'

    gradleLint {
        alwaysRun = false // do not automatically run - must be executed manually
        autoLintAfterFailure = false // only run lint after a successful build
        rules = []
        criticalRules = [
                'dependency-parantheses',
                'overridden-dependency-version',
                'unused-exclude-by-dep',
                'unused-exclude-by-conf',
                'duplicate-dependency-class',
                'dependency-tuple-expression'
        ]
    }
}

configure(rootProject) {
    defaultTasks 'clean', 'build', 'integrationTest'

    task clean {
        doLast {
            delete fileTree("${rootProject.projectDir}") {
                include '**/*.log'
                include '**/*.log.*.gz'
                include '**/*.log.*.tmp'
            }
        }
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'nebula.project'
    apply plugin: 'nebula.info'
    apply plugin: 'nebula.integtest-standalone'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'io.franzbecker.gradle-lombok'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
        maven {
            // needed for netlayer and consensusj packages
            url "https://jitpack.io"
        }
    }

    sourceSets {
        main {
            proto {
                // In addition to the default 'src/main/proto'
                srcDir file('src/main/java')
            }
            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'org.slf4j:slf4j-api'
        implementation "com.google.guava:guava:${guavaVersion}"

        implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
        implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        archiveClassifier.set('test')
        from sourceSets.test.output
    }

    pluginManager.withPlugin('org.springframework.boot') {

        dependencies {
            developmentOnly 'org.springframework.boot:spring-boot-devtools'
        }

        jar {
            enabled = true
        }

        bootJar {
            archiveClassifier.set('boot')
        }

        bootRun {
            environment "TESTCONTAINERS_RYUK_DISABLED", testcontainersRyukDisabled
        }

        springBoot {
            buildInfo {
                properties {
                    // overwrite "time" property to enable reproducible builds
                    // see https://reproducible-builds.org/docs/timestamps/
                    time = System.getenv('SOURCE_DATE_EPOCH') ?: null
                }
            }
        }
    }

    test {
        environment "TESTCONTAINERS_RYUK_DISABLED", testcontainersRyukDisabled

        useJUnitPlatform()
    }

    integrationTest {
        environment "TESTCONTAINERS_RYUK_DISABLED", testcontainersRyukDisabled

        useJUnitPlatform()
    }

    artifacts {
        archives testJar, sourcesJar
    }

    lombok {
        version = "${lombokVersion}"
        sha256 = null // skip verifyLombok task - will be done by gradle dependency verification
    }

    protobuf {
        protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }

        plugins {
            grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
        }

        generateProtoTasks {
            all()*.plugins { grpc {} }
        }
    }

    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.STARTED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED
            showExceptions true
            exceptionFormat TestExceptionFormat.FULL
            showCauses true
            showStackTraces true

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

    task dependencyTree(type: DependencyReportTask) {}

    task delombok(type: DelombokTask, dependsOn: compileJava) {
        def srcDirs = sourceSets.main.java.srcDirs.findAll { it.exists() }

        enabled = subprojects.isEmpty() && !srcDirs.isEmpty()

        ext.outputDir = file("$buildDir/delombok")
        outputs.dir(outputDir)
        srcDirs.each {
            inputs.dir(it)
            args(it, "-d", outputDir)
        }

        doFirst {
            outputDir.deleteDir()
        }
    }

    javadoc {
        dependsOn delombok
        source = delombok.outputDir
        failOnError = false
    }

    tasks.withType(AbstractArchiveTask) {
        // activate reproducible archives
        // see https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    infoBroker {
        // exclude properties that prevent reproducible builds
        excludedManifestProperties = ['Created-By', 'Build-Date', 'Built-OS', 'Built-By', 'Build-Java-Version']
    }
}

// disable test tasks in check phase for all 'spring-testcontainer-*' subprojects.
// these subprojects tests are very expensive as they all start a lot of docker containers.
// you can invoke them manually via `./gradlew check -PtestcontainerTest`
configure(subprojects.findAll { project -> project.name.indexOf('spring-testcontainer-') == 0 }) {
    test.onlyIf { project.hasProperty('testcontainerTest') }
    integrationTest.onlyIf { project.hasProperty('testcontainerTest') }
}

// disable test tasks in check phase for all '*-example-application' subprojects.
// you can invoke them manually via `./gradlew check -PexampleTest`
configure(subprojects.findAll { project -> project.name.indexOf('-example-application') > 0 }) {
    test.onlyIf { project.hasProperty('exampleTest') }
    integrationTest.onlyIf { project.hasProperty('exampleTest') }
}
