package org.tbk.lightning.regtest.setup.devel;

import org.tbk.lightning.regtest.setup.AbstractClnNodeRegistrar;

import java.util.HexFormat;

public abstract class AbstractDevelClnNodeRegistrar extends AbstractClnNodeRegistrar {

    /**
     * Override this method if you do not use the "common" ca cert.
     *
     * @return the "common" ca cert
     */
    @Override
    protected byte[] caCert() {
        // file `docker/regtest/lightning-regtest-setup-devel/data/cln_common/regtest/ca.pem` as hex
        return HexFormat.of().parseHex("2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0d0a4d4949426354434341526567417749424167494943496e716868525364495577436759494b6f5a497a6a304541774977466a45554d424947413155454177774c0d0a5932787549464a7662335167513045774942634e4e7a55774d5441784d4441774d444177576867504e4441354e6a41784d4445774d4441774d4442614d4259780d0a4644415342674e5642414d4d43324e73626942536232393049454e424d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741450d0a6b5730564a4f61617931706156677232587a49636e43644b76644c7539354838503457695a554d6635776844345a7172534259504c46503775364d49714249420d0a67692f6c57354f624149714d517a77357a645355314b4e4e4d457377475159445652305242424977454949445932787567676c7362324e6862476876633351770d0a485159445652304f424259454649563055685347366f6b496169644f33663971313248766f7554424d41384741315564457745422f7751464d414d42416638770d0a436759494b6f5a497a6a304541774944534141775251496742445a4367316b7354483062617242797246414e775368556f5448694b6f766d73514f3873472f650d0a56514943495143377a4a7561612f51766d4437623158537a3334412b6765524b33513345734c6c5534594e706f64734b61773d3d0d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d");
    }

    /**
     * Override this method if you do not use the "common" client cert.
     *
     * @return the "common" client cert
     */
    @Override
    protected byte[] clientCert() {
        // file `docker/regtest/lightning-regtest-setup-devel/data/cln_common/regtest/client.pem` as hex
        return HexFormat.of().parseHex("2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0d0a4d494942526a4342374b41444167454341676b417a435a52636573466d676777436759494b6f5a497a6a304541774977466a45554d424947413155454177774c0d0a5932787549464a7662335167513045774942634e4e7a55774d5441784d4441774d444177576867504e4441354e6a41784d4445774d4441774d4442614d426f780d0a4744415742674e5642414d4d44324e736269426e636e426a49454e73615756756444425a4d424d4742797147534d34394167454743437147534d3439417745480d0a41304941424f48396358366b6a5356704463676b7152794648632f457a5343674f3039714e476b6f6f415a3846434b4b6b6f736b5451364261313345376c31690d0a3946455736306638455667703048376d416e42346f582b394343476a485441624d426b4741315564455151534d42434341324e73626f494a6247396a5957786f0d0a62334e304d416f4743437147534d343942414d4341306b414d455943495144756c546d353670624e6232685952526f4d76786f376466667662735749503763530d0a436f4271506541532f774968414c4e56655673457558636747626746446a635638784f6c6a43453261376c7971354134735739513059464d0d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d");
    }

    /**
     * Override this method if you do not use the "common" client key.
     *
     * @return the "common" client key
     */
    @Override
    protected byte[] clientKey() {
        // file `docker/regtest/lightning-regtest-setup-devel/data/cln_common/regtest/client-key.pem` as hex
        return HexFormat.of().parseHex("2d2d2d2d2d424547494e2050524956415445204b45592d2d2d2d2d0d0a4d494748416745414d424d4742797147534d34394167454743437147534d34394177454842473077617749424151516752747a5971376b4534736e4c4f526f420d0a375941324142764f546e327439302f786d4c7a72386f666b6938796852414e43414154682f58462b7049306c615133494a4b6b6368523350784d30676f4474500d0a616a52704b4b41476642516969704b4c4a45304f67577464784f356459765252467574482f4246594b64422b35674a77654b462f765167680d0a2d2d2d2d2d454e442050524956415445204b45592d2d2d2d2d0d0a");
    }
}
