syntax = "proto3";

package bitcoinerlive;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option java_package = "org.tbk.bitcoin.tool.fee.bitcoinerlive.proto";
option java_outer_classname = "BitcoinerliveProtos";
option java_multiple_files = true;

/**
 * Fee Estimates Latest
 * https://bitcoiner.live/api/fees/estimates/latest
 * https://bitcoiner.live/doc/api
 *
 * GET https://bitcoiner.live/api/fees/estimates/latest
 * Return latest fee estimates.
 * Total fees are given for a "typical" transaction of 1 input/2 outputs:
 * p2wpkh (Pay-To-Witness-Public-Key-Hash) refers to native Segwit transactions (141 vbytes, cheapest).
 * p2sh-p2wpkh (Pay-To-Script-Hash/Pay-To-Witness-Public-Key-Hash) refers to Segwit compatibility transactions (166 vbytes, 18% more expensive).
 * p2pkh (Pay-To-Public-Key-Hash) refers to legacy transactions (226 vbytes, 60% more expensive).
 *
 * For example:
{
    "timestamp": number : unix timestamp of when the data was last refreshed,
    "estimates": {
        "number : target confirmation in minutes": {
            "sat_per_vbyte": number : estimated fee rate in satoshis per virtual-byte,

            // approximate total fee for a 1 input/2 outputs transaction, for different transaction types, in both satoshis and USD
            "total": {
                "p2pkh": {"usd": ..., "satoshi": ...},
                "p2sh-p2wpkh": {"usd": ..., "satoshi": ...},
                "p2wpkh": {"usd": ..., "satoshi": ...}
            }
        },
        ...
    }
}
 */
message FeeEstimatesLatestRequest {
    enum Confidence {
        // confidence: the target confirmation probability. Possible values: 0.5, 0.8, 0.9
        HIGH = 0; // can be equal to MAX but not higher
        MEDIUM = 1; // can be anything but not higher than HIGH and lower than LOW
        LOW = 2; // can be equal to MIN but not lower
    }

    Confidence confidence_type = 1 [json_name = "confidence_type"];
}

message FeeEstimatesLatestResponse {
    message Estimate {
        message Entry {
            double usd = 1 [json_name = "usd"];
            int64 satoshi = 2 [json_name = "satoshi"];
        }
        int64 sat_per_vbyte = 1 [json_name = "sat_per_vbyte"];
        map<string, Entry> total = 2 [json_name = "total"];
    }
    int64 timestamp = 1 [json_name = "timestamp"];
    map<string, Estimate> estimate = 2 [json_name = "estimates"];
}
